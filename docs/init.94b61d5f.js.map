{"version":3,"sources":["ui.ts","constants.ts","gameState.ts","buttons.ts","init.js"],"names":["init","console","log","handleUserAction","nextTimeToTick","Date","now","requestAnimationFrame","nextAnimationFrame","tick","TICK_RATE"],"mappings":";AAQA,aARA,SAAgB,EAAO,GACrB,SAAS,cAAc,QAAQ,UAAY,WAAW,EAGxD,SAAgB,EAAS,GACvB,SAAS,cAAc,SAAS,UAAY,QAAQ,EAGtD,SAAgB,EAAc,GAC5B,SAAS,cAAc,aAAa,UAAU,OAAO,UAAW,GADlE,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,QAAA,SAAA,QAAA,YAAA,EARA,QAAA,OAAA,EAIA,QAAA,SAAA,EAIA,QAAA,cAAA;;ACkBa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,gBAAA,QAAA,eAAA,QAAA,kBAAA,QAAA,aAAA,QAAA,WAAA,QAAA,OAAA,QAAA,YAAA,QAAA,MAAA,QAAA,eAAA,EA1BA,QAAA,UAAoB,IACpB,QAAA,MAAQ,CAAC,OAAQ,OAAQ,WACzB,QAAA,YAAsB,GACtB,QAAA,OAAS,CAAC,MAAO,QACjB,QAAA,WAAqB,GACrB,QAAA,aAAuB,EAWvB,QAAA,kBAA6B,SAAC,GAClC,OAAA,KAAK,MAAsB,EAAhB,KAAK,UAAgB,EAAI,GAEhC,QAAA,eAA0B,SAAC,GAC/B,OAAA,KAAK,MAAsB,EAAhB,KAAK,UAAgB,EAAI,GAEhC,QAAA,gBAA2B,SAAC,GAChC,OAAA,KAAK,MAAsB,EAAhB,KAAK,UAAgB,EAAI,GAGhC,QAAA,WAAa,SAAC,QAAA,IAAA,IAAA,EAAA,IACzB,SAAS,cACP,UACA,UAAY,4BAA4B,EAAI;;AC2IhD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,sBAAA,EAxKA,IAAA,EAAA,QAAA,QACA,EAAA,QAAA,eAWM,EAAY,CAChB,QAAS,OACT,MAAO,EACP,UAAW,EACX,WAAY,EACZ,YAAa,EACb,UAAW,EACX,SAAU,EACV,wBAAyB,EACzB,sBAAuB,EACvB,KAAA,WAmBS,OAlBF,KAAA,QAED,KAAK,QAAU,KAAK,SACjB,KAAA,OACI,KAAK,QAAU,KAAK,UACxB,KAAA,QACI,KAAK,QAAU,KAAK,WACxB,KAAA,YACI,KAAK,QAAU,KAAK,QACxB,KAAA,MACI,KAAK,QAAU,KAAK,uBACxB,KAAA,mBACI,KAAK,QAAU,KAAK,qBACxB,KAAA,iBACI,KAAK,QAAU,KAAK,UACxB,KAAA,OAGA,KAAK,OAEd,UAAA,WACO,KAAA,QAAU,WACV,KAAA,SAAW,KAAK,MAAQ,EAC7B,EAAA,OAAO,OACP,EAAA,SAAS,OACT,EAAA,cAEF,KAAA,WACO,KAAA,QAAU,SACV,KAAA,UAAY,EACZ,KAAA,MAAQ,KAAK,SAAW,EAAA,YAAc,EAAI,EAC/C,EAAA,SAAS,EAAA,OAAO,KAAK,QAChB,KAAA,UAAY,KAAK,MAAQ,EAAA,WACzB,KAAA,WAAa,EAAA,kBAAkB,KAAK,OACpC,KAAA,qBAEP,MAAA,WACO,KAAA,MAAQ,QACb,EAAA,OAAO,SACP,EAAA,SAAS,SACJ,KAAA,cACA,KAAA,SAAW,KAAK,MAAQ,EAAA,cAE/B,UAAA,WACO,KAAA,QAAU,SACV,KAAA,QAAU,EAAA,eAAe,KAAK,OAC9B,KAAA,YAAc,EACnB,EAAA,OAAO,WAET,KAAA,WACO,KAAA,QAAU,UACV,KAAA,UAAY,EACZ,KAAA,QAAU,EAAA,eAAe,KAAK,OACnC,EAAA,OAAO,YAET,IAAA,WACO,KAAA,QAAU,OACf,EAAA,SAAS,QACT,EAAA,OAAO,QACF,KAAA,cACL,EAAA,WAAW,2DAEb,iBAAA,WACO,KAAA,QAAU,cACf,EAAA,OAAO,aACF,KAAA,wBAA0B,EAC1B,KAAA,qBAAuB,KAAK,MAAQ,GAE3C,eAAA,WACO,KAAA,sBAAwB,EACxB,KAAA,QAAU,SACf,EAAA,eAAc,GACT,KAAA,qBAEP,kBAAA,WACuB,WAAjB,KAAK,UACoB,SAAvB,EAAA,OAAO,KAAK,OACd,EAAA,OAAO,QAEP,EAAA,OAAO,YAIb,iBAAA,SAAiB,GAEb,IAAA,CAAC,QAAS,UAAW,cAAe,YAAY,SAAS,KAAK,SAM5D,GAAiB,SAAjB,KAAK,SAAuC,SAAjB,KAAK,QAK5B,OAAA,GACD,IAAA,UACE,KAAA,gBACL,MACG,IAAA,OACE,KAAA,cACL,MACG,IAAA,OACE,KAAA,YAZF,KAAA,aAgBT,cAAA,WACO,KAAA,OAAS,KAAK,MAAQ,GAAK,EAAA,OAAO,OACvC,EAAA,SAAS,EAAA,OAAO,KAAK,QAChB,KAAA,qBAEP,YAAA,WACuB,YAAjB,KAAK,UAIJ,KAAA,SAAW,EAChB,EAAA,eAAc,GACT,KAAA,mBACA,KAAA,WAAa,EAAA,kBAAkB,KAAK,SAE3C,KAAA,WACuB,WAAjB,KAAK,UAIJ,KAAA,QAAU,UACV,KAAA,SAAW,EACX,KAAA,SAAW,EAAA,gBAAgB,KAAK,OAChC,KAAA,uBAAyB,KAAK,MAAQ,IAE7C,YAAA,WACO,KAAA,UAAY,EACZ,KAAA,WAAa,EACb,KAAA,YAAc,EACd,KAAA,SAAW,EACX,KAAA,UAAY,EACZ,KAAA,wBAA0B,EAC1B,KAAA,sBAAwB,IAIpB,QAAA,iBAAmB,EAAU,iBAAiB,KAAK,GAChE,QAAA,QAAe;;AChKf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IARA,IAAA,EAAA,QAAA,eAEM,EAAqB,SAAC,EAAmB,GAC7C,SACG,cAAc,IAAI,EAAA,MAAM,GAAU,SAClC,UAAU,OAAO,cAAe,IAGrC,SAAwB,EAAY,GAC9B,IAAA,EAAe,EAgBnB,SAAS,cAAc,YAAY,iBAAiB,QAd3C,SAAY,GAAE,IAAA,EAAM,EAAA,OACvB,EAAO,UAAU,SAAS,aAC5B,EAAmB,GAAc,GACjC,GAAgB,EAAI,GAAgB,EAAA,MAAM,OAC1C,EAAmB,GAAc,IACxB,EAAO,UAAU,SAAS,cACnC,EAAmB,GAAc,GACjC,GAAgB,EAAI,GAAgB,EAAA,MAAM,OAC1C,EAAmB,GAAc,IAEjC,EAAiB,EAAA,MAAM,MAb7B,QAAA,QAAA;;ACiBI,aAzBJ,IAAA,EAAA,EAAA,QAAA,mBACA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,iBAuBI,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,IAAA,GAAA,mBAAA,QAAA,OAAA,KAAA,IAAA,EAAA,IAAA,QAAA,OAAA,EAAA,WAAA,OAAA,GAAA,EAAA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,GAAA,OAAA,GAAA,iBAAA,GAAA,mBAAA,EAAA,MAAA,CAAA,QAAA,GAAA,IAAA,EAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,OAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,KAAA,IAAA,EAAA,KAAA,EAAA,KAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EArBJ,SAASA,IACPC,QAAQC,IAAI,kBACAC,EAAAA,EAAAA,SAAAA,EAAZ,kBAEIC,IAAAA,EAAiBC,KAAKC,MAc1BC,sBAXSC,SAAAA,IACDF,MAAAA,EAAMD,KAAKC,MAEbF,GAAkBE,IACfG,EAAAA,QAAAA,OACLL,EAAiBE,EAAMI,EAAvB,WAGFH,sBAAsBC,KAM1BR","file":"init.94b61d5f.js","sourceRoot":"../src","sourcesContent":["export function modFox(state: String) {\n  document.querySelector(\".fox\").className = `fox fox-${state}`;\n}\n\nexport function modScene(state: String) {\n  document.querySelector(\".game\").className = `game ${state}`;\n}\n\nexport function togglePoopBag(show: Boolean) {\n  document.querySelector(\".poop-bag\").classList.toggle(\"hidden\", !show);\n}\n","export const TICK_RATE: number = 1000;\nexport const ICONS = [\"fish\", \"poop\", \"weather\"];\nexport const RAIN_CHANCE: number = 0.2;\nexport const SCENES = [\"day\", \"rain\"];\nexport const DAY_LENGTH: number = 60;\nexport const NIGHT_LENGTH: number = 3;\n\n// TODO:\n// (ISSUE)\n// If timers are the same the game won't work.\n// For instance if getNextPoopTime is the same as celebratingTime\n// it will celebrate but never poop, and it will die because the poop\n// was neve cleaned.\ninterface getTime {\n  (clock: number): number;\n}\nexport const getNextHungerTime: getTime = (clock) => {\n  return Math.floor(Math.random() * 3) + 5 + clock;\n};\nexport const getNextDieTime: getTime = (clock) => {\n  return Math.floor(Math.random() * 2) + 3 + clock;\n};\nexport const getNextPoopTime: getTime = (clock) => {\n  return Math.floor(Math.random() * 2) + 6 + clock;\n};\n\nexport const writeModal = (text: string = \"\"): void => {\n  document.querySelector(\n    \".modal\"\n  ).innerHTML = `<div class=\"modal-inner\">${text}</div>`;\n};\n","import { modFox, modScene, togglePoopBag } from \"./ui\";\nimport {\n  RAIN_CHANCE,\n  SCENES,\n  DAY_LENGTH,\n  NIGHT_LENGTH,\n  getNextDieTime,\n  getNextHungerTime,\n  getNextPoopTime,\n  writeModal,\n} from \"./constants\";\n\nconst gameState = {\n  current: \"INIT\",\n  clock: 1,\n  wakeTime: -1,\n  sleepTime: -1,\n  hungryTime: -1,\n  poopTime: -1,\n  dieTime: -1,\n  timeToStartCelebrating: -1,\n  timeToEndCelebrating: -1,\n  tick(): void {\n    this.clock++;\n\n    if (this.clock === this.wakeTime) {\n      this.wake();\n    } else if (this.clock === this.sleepTime) {\n      this.sleep();\n    } else if (this.clock === this.hungryTime) {\n      this.getHungry();\n    } else if (this.clock === this.dieTime) {\n      this.die();\n    } else if (this.clock === this.timeToStartCelebrating) {\n      this.startcelebrating();\n    } else if (this.clock === this.timeToEndCelebrating) {\n      this.endCelebrating();\n    } else if (this.clock === this.poopTime) {\n      this.poop();\n    }\n\n    return this.clock;\n  },\n  startGame(): void {\n    this.current = \"HATCHING\";\n    this.wakeTime = this.clock + 3;\n    modFox(\"egg\");\n    modScene(\"day\");\n    writeModal();\n  },\n  wake(): void {\n    this.current = \"IDLING\";\n    this.wakeTime = -1;\n    this.scene = Math.random() > RAIN_CHANCE ? 0 : 1;\n    modScene(SCENES[this.scene]);\n    this.sleepTime = this.clock + DAY_LENGTH;\n    this.hungryTime = getNextHungerTime(this.clock);\n    this.determineFoxState();\n  },\n  sleep(): void {\n    this.state = \"SLEEP\";\n    modFox(\"sleep\");\n    modScene(\"night\");\n    this.clearTimers();\n    this.wakeTime = this.clock + NIGHT_LENGTH;\n  },\n  getHungry(): void {\n    this.current = \"HUNGRY\";\n    this.dieTime = getNextDieTime(this.clock);\n    this.hungryTime = -1;\n    modFox(\"hungry\");\n  },\n  poop(): void {\n    this.current = \"POOPING\";\n    this.poopTime = -1;\n    this.dieTime = getNextDieTime(this.clock);\n    modFox(\"pooping\");\n  },\n  die(): void {\n    this.current = \"DEAD\";\n    modScene(\"dead\");\n    modFox(\"dead\");\n    this.clearTimers();\n    writeModal(\"The fox died :( <br/> Press the middle button to start\");\n  },\n  startcelebrating(): void {\n    this.current = \"CELEBRATING\";\n    modFox(\"celebrate\");\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = this.clock + 2;\n  },\n  endCelebrating(): void {\n    this.timeToEndCelebrating = -1;\n    this.current = \"IDLING\";\n    togglePoopBag(false);\n    this.determineFoxState();\n  },\n  determineFoxState(): void {\n    if (this.current === \"IDLING\") {\n      if (SCENES[this.scene] === \"rain\") {\n        modFox(\"rain\");\n      } else {\n        modFox(\"idling\");\n      }\n    }\n  },\n  handleUserAction(icon: string): void {\n    if (\n      [\"SLEEP\", \"FEEDING\", \"CELEBRATING\", \"HATCHING\"].includes(this.current)\n    ) {\n      // do nothing\n      return;\n    }\n\n    if (this.current === \"INIT\" || this.current === \"DEAD\") {\n      this.startGame();\n      return;\n    }\n\n    switch (icon) {\n      case \"weather\":\n        this.changeWeather();\n        break;\n      case \"poop\":\n        this.cleanUpPoop();\n        break;\n      case \"fish\":\n        this.feed();\n        break;\n    }\n  },\n  changeWeather(): void {\n    this.scene = (this.scene + 1) % SCENES.length;\n    modScene(SCENES[this.scene]);\n    this.determineFoxState();\n  },\n  cleanUpPoop(): void {\n    if (this.current !== \"POOPING\") {\n      return;\n    }\n\n    this.dieTime = -1;\n    togglePoopBag(true);\n    this.startcelebrating();\n    this.hungryTime = getNextHungerTime(this.clock);\n  },\n  feed(): void {\n    if (this.current !== \"HUNGRY\") {\n      return;\n    }\n\n    this.current = \"FEEDING\";\n    this.dieTime = -1;\n    this.poopTime = getNextPoopTime(this.clock);\n    this.timeToStartCelebrating = this.clock + 2;\n  },\n  clearTimers(): void {\n    this.wakeTime = -1;\n    this.sleepTime = -1;\n    this.hungryTime = -1;\n    this.dieTime = -1;\n    this.poopTime = -1;\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = -1;\n  },\n};\n\nexport const handleUserAction = gameState.handleUserAction.bind(gameState);\nexport default gameState;\n","import { ICONS } from \"./constants\";\n\nconst toggleHightlighted = (iconIndex: number, show: boolean) => {\n  document\n    .querySelector(`.${ICONS[iconIndex]}-icon`)\n    .classList.toggle(\"highlighted\", show);\n};\n\nexport default function initButtons(handleUserAction: (icon: string) => void) {\n  let selectedIcon = 0;\n\n  function buttonClick({ target }) {\n    if (target.classList.contains(\"left-btn\")) {\n      toggleHightlighted(selectedIcon, false);\n      selectedIcon = (2 + selectedIcon) % ICONS.length;\n      toggleHightlighted(selectedIcon, true);\n    } else if (target.classList.contains(\"right-btn\")) {\n      toggleHightlighted(selectedIcon, false);\n      selectedIcon = (1 + selectedIcon) % ICONS.length;\n      toggleHightlighted(selectedIcon, true);\n    } else {\n      handleUserAction(ICONS[selectedIcon]);\n    }\n  }\n\n  document.querySelector(\".buttons\").addEventListener(\"click\", buttonClick);\n}\n","import game, { handleUserAction } from \"./gameState.ts\";\nimport { TICK_RATE } from \"./constants.ts\";\nimport initButtons from \"./buttons.ts\";\n\nfunction init() {\n  console.log(\"starting game\");\n  initButtons(handleUserAction);\n\n  let nextTimeToTick = Date.now();\n\n  // :eyes: Clojure!\n  function nextAnimationFrame() {\n    const now = Date.now();\n\n    if (nextTimeToTick <= now) {\n      game.tick();\n      nextTimeToTick = now + TICK_RATE;\n    }\n\n    requestAnimationFrame(nextAnimationFrame);\n  }\n\n  requestAnimationFrame(nextAnimationFrame);\n}\n\ninit();\n"]}