{"version":3,"sources":["ui.js","constants.js","gameState.js","buttons.js","init.js"],"names":["modFox","state","document","querySelector","className","modScene","togglePoopBag","show","classList","toggle","TICK_RATE","ICONS","RAIN_CHANCE","SCENES","DAY_LENGTH","NIGHT_LENGTH","getNextHungerTime","clock","Math","floor","random","getNextDieTime","getNextPoopTime","writeModal","text","innerHTML","gameState","current","wakeTime","sleepTime","hungryTime","poopTime","dieTime","timeToStartCelebrating","timeToEndCelebrating","tick","wake","sleep","getHungry","die","startcelebrating","endCelebrating","poop","startGame","scene","determineFoxState","clearTimers","handleUserAction","icon","includes","changeWeather","cleanUpPoop","feed","length","bind","toggleHightlighted","initButtons","selectedIcon","addEventListener","buttonClick","target","contains","init","console","log","nextTimeToTick","Date","now","requestAnimationFrame","nextAnimationFrame"],"mappings":"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","file":"init.e950dc25.js","sourceRoot":"../src","sourcesContent":["export function modFox(state) {\n  document.querySelector(\".fox\").className = `fox fox-${state}`;\n}\n\nexport function modScene(state) {\n  document.querySelector(\".game\").className = `game ${state}`;\n}\n\nexport function togglePoopBag(show) {\n  document.querySelector(\".poop-bag\").classList.toggle(\"hidden\", !show);\n}\n","export const TICK_RATE = 3000;\nexport const ICONS = [\"fish\", \"poop\", \"weather\"];\nexport const RAIN_CHANCE = 0.4;\nexport const SCENES = [\"day\", \"rain\"];\nexport const DAY_LENGTH = 60;\nexport const NIGHT_LENGTH = 3;\n\n// TODO:\n// (ISSUE)\n// If timers are the same the game won't work.\n// For instance if getNextPoopTime is the same as celebratingTime\n// it will celebrate but never poop, and it will die because the poop\n// was neve cleaned.\nexport const getNextHungerTime = (clock) => {\n  return Math.floor(Math.random() * 3) + 5 + clock;\n};\nexport const getNextDieTime = (clock) => {\n  return Math.floor(Math.random() * 2) + 12 + clock;\n};\nexport const getNextPoopTime = (clock) => {\n  return Math.floor(Math.random() * 2) + 8 + clock;\n};\n\nexport const writeModal = (text = \"\") => {\n  document.querySelector(\n    \".modal\"\n  ).innerHTML = `<div class=\"modal-inner\">${text}</div>`;\n};\n","import { modFox, modScene, togglePoopBag } from \"./ui\";\nimport {\n  RAIN_CHANCE,\n  SCENES,\n  DAY_LENGTH,\n  NIGHT_LENGTH,\n  getNextDieTime,\n  getNextHungerTime,\n  getNextPoopTime,\n  writeModal,\n} from \"./constants\";\n\nconst gameState = {\n  current: \"INIT\",\n  clock: 1,\n  wakeTime: -1,\n  sleepTime: -1,\n  hungryTime: -1,\n  poopTime: -1,\n  dieTime: -1,\n  timeToStartCelebrating: -1,\n  timeToEndCelebrating: -1,\n  tick() {\n    this.clock++;\n\n    if (this.clock === this.wakeTime) {\n      this.wake();\n    } else if (this.clock === this.sleepTime) {\n      this.sleep();\n    } else if (this.clock === this.hungryTime) {\n      this.getHungry();\n    } else if (this.clock === this.dieTime) {\n      this.die();\n    } else if (this.clock === this.timeToStartCelebrating) {\n      this.startcelebrating();\n    } else if (this.clock === this.timeToEndCelebrating) {\n      this.endCelebrating();\n    } else if (this.clock === this.poopTime) {\n      this.poop();\n    }\n\n    return this.clock;\n  },\n  startGame() {\n    this.current = \"HATCHING\";\n    this.wakeTime = this.clock + 3;\n    modFox(\"egg\");\n    modScene(\"day\");\n    writeModal();\n  },\n  wake() {\n    this.current = \"IDLING\";\n    this.wakeTime = -1;\n    this.scene = Math.random() > RAIN_CHANCE ? 0 : 1;\n    modScene(SCENES[this.scene]);\n    this.sleepTime = this.clock + DAY_LENGTH;\n    this.hungryTime = getNextHungerTime(this.clock);\n    this.determineFoxState();\n  },\n  sleep() {\n    this.state = \"SLEEP\";\n    modFox(\"sleep\");\n    modScene(\"night\");\n    this.clearTimers();\n    this.wakeTime = this.clock + NIGHT_LENGTH;\n  },\n  getHungry() {\n    this.current = \"HUNGRY\";\n    this.dieTime = getNextDieTime(this.clock);\n    this.hungryTime = -1;\n    modFox(\"hungry\");\n  },\n  poop() {\n    this.current = \"POOPING\";\n    this.poopTime = -1;\n    this.dieTime = getNextDieTime(this.clock);\n    modFox(\"pooping\");\n  },\n  die() {\n    this.current = \"DEAD\";\n    modScene(\"dead\");\n    modFox(\"dead\");\n    this.clearTimers();\n    writeModal(\"The fox died :( <br/> Press the middle button to start\");\n  },\n  startcelebrating() {\n    this.current = \"CELEBRATING\";\n    modFox(\"celebrate\");\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = this.clock + 2;\n  },\n  endCelebrating() {\n    this.timeToEndCelebrating = -1;\n    this.current = \"IDLING\";\n    togglePoopBag(false);\n    this.determineFoxState();\n  },\n  determineFoxState() {\n    if (this.current === \"IDLING\") {\n      if (SCENES[this.scene] === \"rain\") {\n        modFox(\"rain\");\n      } else {\n        modFox(\"idling\");\n      }\n    }\n  },\n  handleUserAction(icon) {\n    if (\n      [\"SLEEP\", \"FEEDING\", \"CELEBRATING\", \"HATCHING\"].includes(this.current)\n    ) {\n      // do nothing\n      return;\n    }\n\n    if (this.current === \"INIT\" || this.current === \"DEAD\") {\n      this.startGame();\n      return;\n    }\n\n    switch (icon) {\n      case \"weather\":\n        this.changeWeather();\n        break;\n      case \"poop\":\n        this.cleanUpPoop();\n        break;\n      case \"fish\":\n        this.feed();\n        break;\n    }\n  },\n  changeWeather() {\n    this.scene = (this.scene + 1) % SCENES.length;\n    modScene(SCENES[this.scene]);\n    this.determineFoxState();\n  },\n  cleanUpPoop() {\n    if (this.current !== \"POOPING\") {\n      return;\n    }\n\n    this.dieTime = -1;\n    togglePoopBag(true);\n    this.startcelebrating();\n    this.hungryTime = getNextHungerTime(this.clock);\n  },\n  feed() {\n    if (this.current !== \"HUNGRY\") {\n      return;\n    }\n\n    this.current = \"FEEDING\";\n    this.dieTime = -1;\n    this.poopTime = getNextPoopTime(this.clock);\n    this.timeToStartCelebrating = this.clock + 2;\n    modFox(\"eating\");\n  },\n  clearTimers() {\n    this.wakeTime = -1;\n    this.sleepTime = -1;\n    this.hungryTime = -1;\n    this.dieTime = -1;\n    this.poopTime = -1;\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = -1;\n  },\n};\n\nexport const handleUserAction = gameState.handleUserAction.bind(gameState);\nexport default gameState;\n","import { ICONS } from \"./constants\";\n\nconst toggleHightlighted = (icon, show) => {\n  document\n    .querySelector(`.${ICONS[icon]}-icon`)\n    .classList.toggle(\"highlighted\", show);\n};\n\nexport default function initButtons(handleUserAction) {\n  let selectedIcon = 0;\n\n  function buttonClick({ target }) {\n    if (target.classList.contains(\"left-btn\")) {\n      toggleHightlighted(selectedIcon, false);\n      selectedIcon = (2 + selectedIcon) % ICONS.length;\n      toggleHightlighted(selectedIcon, true);\n    } else if (target.classList.contains(\"right-btn\")) {\n      toggleHightlighted(selectedIcon, false);\n      selectedIcon = (1 + selectedIcon) % ICONS.length;\n      toggleHightlighted(selectedIcon, true);\n    } else {\n      handleUserAction(ICONS[selectedIcon]);\n    }\n  }\n\n  document.querySelector(\".buttons\").addEventListener(\"click\", buttonClick);\n}\n","import game, { handleUserAction } from \"./gameState\";\nimport { TICK_RATE } from \"./constants\";\nimport initButtons from \"./buttons\";\n\nfunction init() {\n  console.log(\"starting game\");\n  initButtons(handleUserAction);\n\n  let nextTimeToTick = Date.now();\n\n  // :eyes: Clojure!\n  function nextAnimationFrame() {\n    const now = Date.now();\n\n    if (nextTimeToTick <= now) {\n      game.tick();\n      nextTimeToTick = now + TICK_RATE;\n    }\n\n    requestAnimationFrame(nextAnimationFrame);\n  }\n\n  requestAnimationFrame(nextAnimationFrame);\n}\n\ninit();\n"]}